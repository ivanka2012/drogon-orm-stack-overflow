//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "index_blogposts.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
#include <array>

    #include "BlogPost.h"

using namespace drogon;
std::string index_blogposts::genText(const DrTemplateData& index_blogposts_view_data)
{
	drogon::OStringStream index_blogposts_tmp_stream;
	std::string layoutName{""};
    auto blogPosts = index_blogposts_view_data.get<std::vector<CBlogPost>>("blogPosts");
	index_blogposts_tmp_stream << "<html lang=\"en\">\n";
	index_blogposts_tmp_stream << "  <head>\n";
	index_blogposts_tmp_stream << "    <meta charset=\"utf-8\">\n";
	index_blogposts_tmp_stream << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n";
index_blogposts_tmp_stream<<"\n";
	index_blogposts_tmp_stream << "    <title>Ivan's blog</title>\n";
	index_blogposts_tmp_stream << "    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n";
	index_blogposts_tmp_stream << "    <style>\n";
	index_blogposts_tmp_stream << "        body {\n";
	index_blogposts_tmp_stream << "        padding-top: 60px;\n";
	index_blogposts_tmp_stream << "        }\n";
	index_blogposts_tmp_stream << "        @media (max-width: 979px) {\n";
	index_blogposts_tmp_stream << "        body {\n";
	index_blogposts_tmp_stream << "            padding-top: 0px;\n";
	index_blogposts_tmp_stream << "        }\n";
	index_blogposts_tmp_stream << "        }\n";
	index_blogposts_tmp_stream << "    </style>\n";
	index_blogposts_tmp_stream << "  </head>\n";
	index_blogposts_tmp_stream << "<body>\n";
	index_blogposts_tmp_stream << "    <nav class=\"navbar navbar-expand-md navbar-light bg-light fixed-top\">\n";
	index_blogposts_tmp_stream << "        <a class=\"navbar-brand\" href=\"#\">Ivan's server</a>\n";
	index_blogposts_tmp_stream << "        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n";
	index_blogposts_tmp_stream << "            <span class=\"navbar-toggler-icon\"></span>\n";
	index_blogposts_tmp_stream << "        </button>\n";
	index_blogposts_tmp_stream << "    </nav>\n";
index_blogposts_tmp_stream<<"\n";
	index_blogposts_tmp_stream << "    <main role=\"main\" class=\"container\">\n";
	index_blogposts_tmp_stream << "        ";
 for(const auto& post : blogPosts){ 
	index_blogposts_tmp_stream << "        <div class=\"container\">\n";
	index_blogposts_tmp_stream << "            <p class=\"h1 my-0\">";
index_blogposts_tmp_stream<<post.GetTitle();
	index_blogposts_tmp_stream << "</p>\n";
	index_blogposts_tmp_stream << "            <p class=\"px-4 font-italic\">";
                time_t now_c = std::chrono::system_clock::to_time_t(post.GetPosted());
                tm now_tm = *std::localtime(&now_c);
                
                std::array<char, 16384> timeBuf;
                strftime(timeBuf.data(), timeBuf.size(), "%Y-%m-%d %H:%M:%S", &now_tm);
                index_blogposts_tmp_stream << "Posted on: ";
                index_blogposts_tmp_stream << std::string{timeBuf.data()};
            
	index_blogposts_tmp_stream << "</p>\n";
	index_blogposts_tmp_stream << "            <p class=\"lead\">";
index_blogposts_tmp_stream<<post.GetBody();
	index_blogposts_tmp_stream << "</p>\n";
	index_blogposts_tmp_stream << "        </div>\n";
	index_blogposts_tmp_stream << "        ";
 } 
	index_blogposts_tmp_stream << "    </main>\n";
	index_blogposts_tmp_stream << "</body>\n";
	index_blogposts_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(index_blogposts_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = index_blogposts_view_data;
auto str = std::move(index_blogposts_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
